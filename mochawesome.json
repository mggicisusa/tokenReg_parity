{
  "stats": {
    "suites": 7,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2017-10-08T00:33:47.965Z",
    "end": "2017-10-08T00:33:52.610Z",
    "duration": 4645,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Token",
        "suites": [],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "uuid": "4ab337a3-6b78-4ed1-9262-e322a7980650",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Token \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "688ffd73-5bc2-4302-b57c-39e12e220203",
            "parentUUID": "4ab337a3-6b78-4ed1-9262-e322a7980650",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Token \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "ce020cdc-8315-4eb9-a037-31ee69b581ca",
            "parentUUID": "4ab337a3-6b78-4ed1-9262-e322a7980650",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Token \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "eab34d24-ec4f-49f6-8915-10595583a1c6",
            "parentUUID": "4ab337a3-6b78-4ed1-9262-e322a7980650",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "",
        "file": "",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": false,
        "hasSuites": false,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Contract: TokenReg",
        "suites": [
          {
            "title": "#register",
            "suites": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: TokenReg #register happy path",
                "timedOut": false,
                "duration": 206,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await tokenReg.register(token.address, \"SIM\", \"SimpleToken\", {from: owner, value: fee});\n      count = await tokenReg.tokenCount();\n      assert.equal(1, count.toNumber());",
                "err": {},
                "isRoot": false,
                "uuid": "e7a50929-c14c-44d1-a892-fc289747c543",
                "parentUUID": "0350a0e7-89dc-4c16-a28a-03d3c64f392c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if TLA is empty",
                "fullTitle": "Contract: TokenReg #register should throw if TLA is empty",
                "timedOut": false,
                "duration": 112,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await expectThrow(tokenReg.register(token.address, \"\", \"SimpleToken\", {from: owner, value: fee}));\n      count = await tokenReg.tokenCount();\n      assert.equal(0, count.toNumber());",
                "err": {},
                "isRoot": false,
                "uuid": "da4fd837-bb8b-4700-8729-313062c92da5",
                "parentUUID": "0350a0e7-89dc-4c16-a28a-03d3c64f392c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if Name is empty",
                "fullTitle": "Contract: TokenReg #register should throw if Name is empty",
                "timedOut": false,
                "duration": 103,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"\", {from: owner, value: fee}));\n      count = await tokenReg.tokenCount();\n      assert.equal(0, count.toNumber());",
                "err": {},
                "isRoot": false,
                "uuid": "31c17c98-be3c-49f4-9db6-2c64abe1fc12",
                "parentUUID": "0350a0e7-89dc-4c16-a28a-03d3c64f392c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if fee is less than required",
                "fullTitle": "Contract: TokenReg #register should throw if fee is less than required",
                "timedOut": false,
                "duration": 97,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"\", {from: owner, value: fee.sub(1)}));\n      count = await tokenReg.tokenCount();\n      assert.equal(0, count.toNumber());",
                "err": {},
                "isRoot": false,
                "uuid": "8e1ffd2c-0d23-47c3-ac5a-43f5086a286d",
                "parentUUID": "0350a0e7-89dc-4c16-a28a-03d3c64f392c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if address is taken",
                "fullTitle": "Contract: TokenReg #register should throw if address is taken",
                "timedOut": false,
                "duration": 191,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await tokenReg.register(token.address, \"SIM\", \"Simple\", {from: owner, value: web3.toWei(0.05, 'ether')});\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"\", {from: owner, value: web3.toWei(0.05, 'ether')}));\n      count = await tokenReg.tokenCount();\n      assert.equal(1, count.toNumber());",
                "err": {},
                "isRoot": false,
                "uuid": "aae58a28-92f7-47ff-9d99-da7159be5506",
                "parentUUID": "0350a0e7-89dc-4c16-a28a-03d3c64f392c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if tla is taken",
                "fullTitle": "Contract: TokenReg #register should throw if tla is taken",
                "timedOut": false,
                "duration": 199,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await tokenReg.register(token.address, \"SIM\", \"Simple\", {from: owner, value: web3.toWei(0.05, 'ether')});\n      token = await Token.new();\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"AnotherSIM\", {from: owner, value: web3.toWei(0.05, 'ether')}));\n      count = await tokenReg.tokenCount();\n      assert.equal(1, count.toNumber());",
                "err": {},
                "isRoot": false,
                "uuid": "af853cad-6de9-4541-adf5-bc4783e1f58d",
                "parentUUID": "0350a0e7-89dc-4c16-a28a-03d3c64f392c",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 300000,
            "file": "/test/tokenreg_test.js",
            "uuid": "0350a0e7-89dc-4c16-a28a-03d3c64f392c",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: TokenReg #register \"before each\" hook",
                "timedOut": false,
                "duration": 78,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "async function (){\n        tokenReg = await TokenReg.new();\n        token = await Token.new();",
                "err": {},
                "isRoot": false,
                "uuid": "c2622240-691d-46fe-bbcf-4677d2275aac",
                "parentUUID": "0350a0e7-89dc-4c16-a28a-03d3c64f392c",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "fullFile": "/Users/rstorm/repos/tokenreg/test/tokenreg_test.js",
            "passes": [
              {
                "title": "happy path",
                "fullTitle": "Contract: TokenReg #register happy path",
                "timedOut": false,
                "duration": 206,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await tokenReg.register(token.address, \"SIM\", \"SimpleToken\", {from: owner, value: fee});\n      count = await tokenReg.tokenCount();\n      assert.equal(1, count.toNumber());",
                "err": {},
                "isRoot": false,
                "uuid": "e7a50929-c14c-44d1-a892-fc289747c543",
                "parentUUID": "0350a0e7-89dc-4c16-a28a-03d3c64f392c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if TLA is empty",
                "fullTitle": "Contract: TokenReg #register should throw if TLA is empty",
                "timedOut": false,
                "duration": 112,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await expectThrow(tokenReg.register(token.address, \"\", \"SimpleToken\", {from: owner, value: fee}));\n      count = await tokenReg.tokenCount();\n      assert.equal(0, count.toNumber());",
                "err": {},
                "isRoot": false,
                "uuid": "da4fd837-bb8b-4700-8729-313062c92da5",
                "parentUUID": "0350a0e7-89dc-4c16-a28a-03d3c64f392c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if Name is empty",
                "fullTitle": "Contract: TokenReg #register should throw if Name is empty",
                "timedOut": false,
                "duration": 103,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"\", {from: owner, value: fee}));\n      count = await tokenReg.tokenCount();\n      assert.equal(0, count.toNumber());",
                "err": {},
                "isRoot": false,
                "uuid": "31c17c98-be3c-49f4-9db6-2c64abe1fc12",
                "parentUUID": "0350a0e7-89dc-4c16-a28a-03d3c64f392c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if fee is less than required",
                "fullTitle": "Contract: TokenReg #register should throw if fee is less than required",
                "timedOut": false,
                "duration": 97,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"\", {from: owner, value: fee.sub(1)}));\n      count = await tokenReg.tokenCount();\n      assert.equal(0, count.toNumber());",
                "err": {},
                "isRoot": false,
                "uuid": "8e1ffd2c-0d23-47c3-ac5a-43f5086a286d",
                "parentUUID": "0350a0e7-89dc-4c16-a28a-03d3c64f392c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if address is taken",
                "fullTitle": "Contract: TokenReg #register should throw if address is taken",
                "timedOut": false,
                "duration": 191,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await tokenReg.register(token.address, \"SIM\", \"Simple\", {from: owner, value: web3.toWei(0.05, 'ether')});\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"\", {from: owner, value: web3.toWei(0.05, 'ether')}));\n      count = await tokenReg.tokenCount();\n      assert.equal(1, count.toNumber());",
                "err": {},
                "isRoot": false,
                "uuid": "aae58a28-92f7-47ff-9d99-da7159be5506",
                "parentUUID": "0350a0e7-89dc-4c16-a28a-03d3c64f392c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if tla is taken",
                "fullTitle": "Contract: TokenReg #register should throw if tla is taken",
                "timedOut": false,
                "duration": 199,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await tokenReg.register(token.address, \"SIM\", \"Simple\", {from: owner, value: web3.toWei(0.05, 'ether')});\n      token = await Token.new();\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"AnotherSIM\", {from: owner, value: web3.toWei(0.05, 'ether')}));\n      count = await tokenReg.tokenCount();\n      assert.equal(1, count.toNumber());",
                "err": {},
                "isRoot": false,
                "uuid": "af853cad-6de9-4541-adf5-bc4783e1f58d",
                "parentUUID": "0350a0e7-89dc-4c16-a28a-03d3c64f392c",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 908,
            "rootEmpty": false
          },
          {
            "title": "#unregister",
            "suites": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: TokenReg #unregister happy path",
                "timedOut": false,
                "duration": 172,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 1);\n      [id] = await tokenReg.fromAddress(token.address);\n      await tokenReg.unregister(id);\n      count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);",
                "err": {},
                "isRoot": false,
                "uuid": "7296f5ed-7909-4443-a7b9-6d075cb2b62f",
                "parentUUID": "59f5ae1e-7881-4c51-9fa4-43907ffaa6d1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when is not called from afri(owner)",
                "fullTitle": "Contract: TokenReg #unregister throws when is not called from afri(owner)",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 1);\n      [id] = await tokenReg.fromAddress(token.address);\n      await expectThrow(tokenReg.unregister(id, {from: investor}));\n      count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 1);",
                "err": {},
                "isRoot": false,
                "uuid": "b3546396-7d93-4850-85ae-9d799d9b886a",
                "parentUUID": "59f5ae1e-7881-4c51-9fa4-43907ffaa6d1",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 300000,
            "file": "/test/tokenreg_test.js",
            "uuid": "59f5ae1e-7881-4c51-9fa4-43907ffaa6d1",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: TokenReg #unregister \"before each\" hook",
                "timedOut": false,
                "duration": 161,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      tokenReg = await TokenReg.new();\n      token = await Token.new();\n      const fee = await tokenReg.fee();\n      await tokenReg.register(token.address, \"SIM\", \"SimpleToken\", {from: owner, value: fee});",
                "err": {},
                "isRoot": false,
                "uuid": "40eea293-9bb4-4b3e-94b0-2dabf27bf336",
                "parentUUID": "59f5ae1e-7881-4c51-9fa4-43907ffaa6d1",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "fullFile": "/Users/rstorm/repos/tokenreg/test/tokenreg_test.js",
            "passes": [
              {
                "title": "happy path",
                "fullTitle": "Contract: TokenReg #unregister happy path",
                "timedOut": false,
                "duration": 172,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 1);\n      [id] = await tokenReg.fromAddress(token.address);\n      await tokenReg.unregister(id);\n      count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);",
                "err": {},
                "isRoot": false,
                "uuid": "7296f5ed-7909-4443-a7b9-6d075cb2b62f",
                "parentUUID": "59f5ae1e-7881-4c51-9fa4-43907ffaa6d1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when is not called from afri(owner)",
                "fullTitle": "Contract: TokenReg #unregister throws when is not called from afri(owner)",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 1);\n      [id] = await tokenReg.fromAddress(token.address);\n      await expectThrow(tokenReg.unregister(id, {from: investor}));\n      count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 1);",
                "err": {},
                "isRoot": false,
                "uuid": "b3546396-7d93-4850-85ae-9d799d9b886a",
                "parentUUID": "59f5ae1e-7881-4c51-9fa4-43907ffaa6d1",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 339,
            "rootEmpty": false
          },
          {
            "title": "#setFee",
            "suites": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: TokenReg #setFee happy path",
                "timedOut": false,
                "duration": 67,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      const defaultFee = await tokenReg.fee();\n      assert.equal(defaultFee.toString(10), web3.toWei(0.05, 'ether').toString(10));\n      await tokenReg.setFee(1);\n      const newFee = await tokenReg.fee();\n      assert.equal(newFee.toNumber(), 1);",
                "err": {},
                "isRoot": false,
                "uuid": "47848539-275a-4f2b-95e9-2573674901c3",
                "parentUUID": "240f8cdf-ddf3-40e2-abb8-c54b59054f4c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when is not called by afri(owner)",
                "fullTitle": "Contract: TokenReg #setFee throws when is not called by afri(owner)",
                "timedOut": false,
                "duration": 68,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      const defaultFee = await tokenReg.fee();\n      assert.equal(defaultFee.toString(10), web3.toWei(0.05, 'ether').toString(10));\n      await expectThrow(tokenReg.setFee(1, {from: investor}));\n      const newFee = await tokenReg.fee();\n      assert.equal(newFee.toString(10), defaultFee.toString(10));",
                "err": {},
                "isRoot": false,
                "uuid": "008d4222-86ea-40f1-ad47-d31f54915c61",
                "parentUUID": "240f8cdf-ddf3-40e2-abb8-c54b59054f4c",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 300000,
            "file": "/test/tokenreg_test.js",
            "uuid": "240f8cdf-ddf3-40e2-abb8-c54b59054f4c",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: TokenReg #setFee \"before each\" hook",
                "timedOut": false,
                "duration": 47,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "async function (){ \n      tokenReg = await TokenReg.new();",
                "err": {},
                "isRoot": false,
                "uuid": "7c96fc37-931e-40df-862f-4ccbabc6810a",
                "parentUUID": "240f8cdf-ddf3-40e2-abb8-c54b59054f4c",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "fullFile": "/Users/rstorm/repos/tokenreg/test/tokenreg_test.js",
            "passes": [
              {
                "title": "happy path",
                "fullTitle": "Contract: TokenReg #setFee happy path",
                "timedOut": false,
                "duration": 67,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      const defaultFee = await tokenReg.fee();\n      assert.equal(defaultFee.toString(10), web3.toWei(0.05, 'ether').toString(10));\n      await tokenReg.setFee(1);\n      const newFee = await tokenReg.fee();\n      assert.equal(newFee.toNumber(), 1);",
                "err": {},
                "isRoot": false,
                "uuid": "47848539-275a-4f2b-95e9-2573674901c3",
                "parentUUID": "240f8cdf-ddf3-40e2-abb8-c54b59054f4c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when is not called by afri(owner)",
                "fullTitle": "Contract: TokenReg #setFee throws when is not called by afri(owner)",
                "timedOut": false,
                "duration": 68,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      const defaultFee = await tokenReg.fee();\n      assert.equal(defaultFee.toString(10), web3.toWei(0.05, 'ether').toString(10));\n      await expectThrow(tokenReg.setFee(1, {from: investor}));\n      const newFee = await tokenReg.fee();\n      assert.equal(newFee.toString(10), defaultFee.toString(10));",
                "err": {},
                "isRoot": false,
                "uuid": "008d4222-86ea-40f1-ad47-d31f54915c61",
                "parentUUID": "240f8cdf-ddf3-40e2-abb8-c54b59054f4c",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 135,
            "rootEmpty": false
          },
          {
            "title": "#setMeta",
            "suites": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: TokenReg #setMeta happy path",
                "timedOut": false,
                "duration": 57,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      await tokenReg.setMeta(id, \"hello\", \"world\");\n      let url = await tokenReg.meta(id, \"hello\");\n      var buf = new Buffer(url.replace('0x',''),'hex');\n      url = buf.toString().replace(/\\u0000/g, '');\n      assert.equal(url, \"world\");",
                "err": {},
                "isRoot": false,
                "uuid": "1137d37d-ec56-4712-aa6d-efeeb6d20171",
                "parentUUID": "0f3fec05-5c9f-4ecb-87b6-180b5ee11128",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 300000,
            "file": "/test/tokenreg_test.js",
            "uuid": "0f3fec05-5c9f-4ecb-87b6-180b5ee11128",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: TokenReg #setMeta \"before each\" hook",
                "timedOut": false,
                "duration": 234,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      tokenReg = await TokenReg.new();\n      token = await Token.new();\n      const fee = await tokenReg.fee();\n      await tokenReg.register(token.address, \"SIM\", \"SimpleToken\", {from: owner, value: fee});\n      [id] = await tokenReg.fromAddress(token.address);",
                "err": {},
                "isRoot": false,
                "uuid": "e950dbad-c6c1-4c62-9bcd-f4a38f1215fa",
                "parentUUID": "0f3fec05-5c9f-4ecb-87b6-180b5ee11128",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "fullFile": "/Users/rstorm/repos/tokenreg/test/tokenreg_test.js",
            "passes": [
              {
                "title": "happy path",
                "fullTitle": "Contract: TokenReg #setMeta happy path",
                "timedOut": false,
                "duration": 57,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      await tokenReg.setMeta(id, \"hello\", \"world\");\n      let url = await tokenReg.meta(id, \"hello\");\n      var buf = new Buffer(url.replace('0x',''),'hex');\n      url = buf.toString().replace(/\\u0000/g, '');\n      assert.equal(url, \"world\");",
                "err": {},
                "isRoot": false,
                "uuid": "1137d37d-ec56-4712-aa6d-efeeb6d20171",
                "parentUUID": "0f3fec05-5c9f-4ecb-87b6-180b5ee11128",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 57,
            "rootEmpty": false
          },
          {
            "title": "#updateToken",
            "suites": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: TokenReg #updateToken happy path",
                "timedOut": false,
                "duration": 140,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      const oldAddress = token.address;\n      assert.equal(tla.toString(10), 'SIM');\n      assert.equal(base.toNumber(), 10**18);\n      assert.equal(name.toString(10), \"SimpleToken\");\n      assert.equal(owner.toString(10), owner);\n      token = await AnotherToken.new();\n      await tokenReg.updateToken(id,token.address);\n      let [newAddress, newTla, newBase, newName, newOwner] = await tokenReg.token(id);\n      assert(oldAddress !== newAddress);\n      assert.equal(tla.toString(10), newTla.toString(10));\n      assert.equal(newBase.toNumber(), 10**10);\n      assert.equal(owner.toString(10), newOwner.toString(10));",
                "err": {},
                "isRoot": false,
                "uuid": "7909e5c1-3550-48fb-a78a-84b77df8a916",
                "parentUUID": "6365c97c-c1c0-4e11-b821-7a683b3d6de9",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 300000,
            "file": "/test/tokenreg_test.js",
            "uuid": "6365c97c-c1c0-4e11-b821-7a683b3d6de9",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: TokenReg #updateToken \"before each\" hook",
                "timedOut": false,
                "duration": 228,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      tokenReg = await TokenReg.new();\n      token = await Token.new();\n      const fee = await tokenReg.fee();\n      await tokenReg.register(token.address, \"SIM\", \"SimpleToken\", {from: owner, value: fee});\n      [id, tla, base, name, owner] = await tokenReg.fromAddress(token.address);",
                "err": {},
                "isRoot": false,
                "uuid": "51cf1535-ae1a-4bc3-9bbf-a329f764429a",
                "parentUUID": "6365c97c-c1c0-4e11-b821-7a683b3d6de9",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "fullFile": "/Users/rstorm/repos/tokenreg/test/tokenreg_test.js",
            "passes": [
              {
                "title": "happy path",
                "fullTitle": "Contract: TokenReg #updateToken happy path",
                "timedOut": false,
                "duration": 140,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      const oldAddress = token.address;\n      assert.equal(tla.toString(10), 'SIM');\n      assert.equal(base.toNumber(), 10**18);\n      assert.equal(name.toString(10), \"SimpleToken\");\n      assert.equal(owner.toString(10), owner);\n      token = await AnotherToken.new();\n      await tokenReg.updateToken(id,token.address);\n      let [newAddress, newTla, newBase, newName, newOwner] = await tokenReg.token(id);\n      assert(oldAddress !== newAddress);\n      assert.equal(tla.toString(10), newTla.toString(10));\n      assert.equal(newBase.toNumber(), 10**10);\n      assert.equal(owner.toString(10), newOwner.toString(10));",
                "err": {},
                "isRoot": false,
                "uuid": "7909e5c1-3550-48fb-a78a-84b77df8a916",
                "parentUUID": "6365c97c-c1c0-4e11-b821-7a683b3d6de9",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 140,
            "rootEmpty": false
          },
          {
            "title": "#drain",
            "suites": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: TokenReg #drain happy path",
                "timedOut": false,
                "duration": 644,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      let pre = await web3.eth.getBalance(owner);\n      await tokenReg.drain();\n      let post = await web3.fromWei(web3.eth.getBalance(owner), 'ether').round(1);\n      let prePlusDrain = web3.fromWei(pre.add(web3.toWei(1, 'ether')), 'ether').round(1);\n      assert.equal(post.toString(10), prePlusDrain.toString(10));",
                "err": {},
                "isRoot": false,
                "uuid": "d332ecf6-0ab9-4b3a-92fe-959a1025db24",
                "parentUUID": "f51ddd7a-d508-4bd5-ad27-68abe39202f4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws if not called by afri(owner) path",
                "fullTitle": "Contract: TokenReg #drain throws if not called by afri(owner) path",
                "timedOut": false,
                "duration": 615,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      let pre = await web3.eth.getBalance(owner);\n      await expectThrow(tokenReg.drain({from: investor}));\n      let post = await web3.fromWei(web3.eth.getBalance(owner), 'ether');\n      assert.equal(post.toString(10), post.toString(10));",
                "err": {},
                "isRoot": false,
                "uuid": "9a1b6021-a25a-4247-9715-9f718e468423",
                "parentUUID": "f51ddd7a-d508-4bd5-ad27-68abe39202f4",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 300000,
            "file": "/test/tokenreg_test.js",
            "uuid": "f51ddd7a-d508-4bd5-ad27-68abe39202f4",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: TokenReg #drain \"before each\" hook",
                "timedOut": false,
                "duration": 125,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      tokenReg = await TokenReg.new();\n      token = await Token.new();\n      await tokenReg.register(token.address, \"SIM\", \"SimpleToken\", {from: investor, value: web3.toWei(1, 'ether')});",
                "err": {},
                "isRoot": false,
                "uuid": "3cd5bb14-77f3-4a68-8a96-3e79bf1a9c0e",
                "parentUUID": "f51ddd7a-d508-4bd5-ad27-68abe39202f4",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "fullFile": "/Users/rstorm/repos/tokenreg/test/tokenreg_test.js",
            "passes": [
              {
                "title": "happy path",
                "fullTitle": "Contract: TokenReg #drain happy path",
                "timedOut": false,
                "duration": 644,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      let pre = await web3.eth.getBalance(owner);\n      await tokenReg.drain();\n      let post = await web3.fromWei(web3.eth.getBalance(owner), 'ether').round(1);\n      let prePlusDrain = web3.fromWei(pre.add(web3.toWei(1, 'ether')), 'ether').round(1);\n      assert.equal(post.toString(10), prePlusDrain.toString(10));",
                "err": {},
                "isRoot": false,
                "uuid": "d332ecf6-0ab9-4b3a-92fe-959a1025db24",
                "parentUUID": "f51ddd7a-d508-4bd5-ad27-68abe39202f4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws if not called by afri(owner) path",
                "fullTitle": "Contract: TokenReg #drain throws if not called by afri(owner) path",
                "timedOut": false,
                "duration": 615,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      let pre = await web3.eth.getBalance(owner);\n      await expectThrow(tokenReg.drain({from: investor}));\n      let post = await web3.fromWei(web3.eth.getBalance(owner), 'ether');\n      assert.equal(post.toString(10), post.toString(10));",
                "err": {},
                "isRoot": false,
                "uuid": "9a1b6021-a25a-4247-9715-9f718e468423",
                "parentUUID": "f51ddd7a-d508-4bd5-ad27-68abe39202f4",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1259,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 300000,
        "file": "/test/tokenreg_test.js",
        "uuid": "7e7562a2-6d49-4ac1-87b4-ef348262e62f",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: TokenReg \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 22,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "323f4209-e0ff-46df-a50a-9ff5fb380dd8",
            "parentUUID": "7e7562a2-6d49-4ac1-87b4-ef348262e62f",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: TokenReg \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "0c84dc58-f360-40b9-a492-53752f0e16d4",
            "parentUUID": "7e7562a2-6d49-4ac1-87b4-ef348262e62f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: TokenReg \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "8c638d76-9cc0-44ac-aa8e-5e62b6604055",
            "parentUUID": "7e7562a2-6d49-4ac1-87b4-ef348262e62f",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "/Users/rstorm/repos/tokenreg/test/tokenreg_test.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "59fa4b7e-f837-4a10-bb5d-7dcd6cd0cc4b",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "happy path",
      "fullTitle": "#register happy path",
      "timedOut": false,
      "duration": 206,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await tokenReg.register(token.address, \"SIM\", \"SimpleToken\", {from: owner, value: fee});\n      count = await tokenReg.tokenCount();\n      assert.equal(1, count.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "e7a50929-c14c-44d1-a892-fc289747c543",
      "parentUUID": "0350a0e7-89dc-4c16-a28a-03d3c64f392c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if TLA is empty",
      "fullTitle": "#register should throw if TLA is empty",
      "timedOut": false,
      "duration": 112,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await expectThrow(tokenReg.register(token.address, \"\", \"SimpleToken\", {from: owner, value: fee}));\n      count = await tokenReg.tokenCount();\n      assert.equal(0, count.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "da4fd837-bb8b-4700-8729-313062c92da5",
      "parentUUID": "0350a0e7-89dc-4c16-a28a-03d3c64f392c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if Name is empty",
      "fullTitle": "#register should throw if Name is empty",
      "timedOut": false,
      "duration": 103,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"\", {from: owner, value: fee}));\n      count = await tokenReg.tokenCount();\n      assert.equal(0, count.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "31c17c98-be3c-49f4-9db6-2c64abe1fc12",
      "parentUUID": "0350a0e7-89dc-4c16-a28a-03d3c64f392c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if fee is less than required",
      "fullTitle": "#register should throw if fee is less than required",
      "timedOut": false,
      "duration": 97,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"\", {from: owner, value: fee.sub(1)}));\n      count = await tokenReg.tokenCount();\n      assert.equal(0, count.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "8e1ffd2c-0d23-47c3-ac5a-43f5086a286d",
      "parentUUID": "0350a0e7-89dc-4c16-a28a-03d3c64f392c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if address is taken",
      "fullTitle": "#register should throw if address is taken",
      "timedOut": false,
      "duration": 191,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await tokenReg.register(token.address, \"SIM\", \"Simple\", {from: owner, value: web3.toWei(0.05, 'ether')});\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"\", {from: owner, value: web3.toWei(0.05, 'ether')}));\n      count = await tokenReg.tokenCount();\n      assert.equal(1, count.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "aae58a28-92f7-47ff-9d99-da7159be5506",
      "parentUUID": "0350a0e7-89dc-4c16-a28a-03d3c64f392c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if tla is taken",
      "fullTitle": "#register should throw if tla is taken",
      "timedOut": false,
      "duration": 199,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await tokenReg.register(token.address, \"SIM\", \"Simple\", {from: owner, value: web3.toWei(0.05, 'ether')});\n      token = await Token.new();\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"AnotherSIM\", {from: owner, value: web3.toWei(0.05, 'ether')}));\n      count = await tokenReg.tokenCount();\n      assert.equal(1, count.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "af853cad-6de9-4541-adf5-bc4783e1f58d",
      "parentUUID": "0350a0e7-89dc-4c16-a28a-03d3c64f392c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path",
      "fullTitle": "#unregister happy path",
      "timedOut": false,
      "duration": 172,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 1);\n      [id] = await tokenReg.fromAddress(token.address);\n      await tokenReg.unregister(id);\n      count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);",
      "err": {},
      "isRoot": false,
      "uuid": "7296f5ed-7909-4443-a7b9-6d075cb2b62f",
      "parentUUID": "59f5ae1e-7881-4c51-9fa4-43907ffaa6d1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when is not called from afri(owner)",
      "fullTitle": "#unregister throws when is not called from afri(owner)",
      "timedOut": false,
      "duration": 167,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 1);\n      [id] = await tokenReg.fromAddress(token.address);\n      await expectThrow(tokenReg.unregister(id, {from: investor}));\n      count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 1);",
      "err": {},
      "isRoot": false,
      "uuid": "b3546396-7d93-4850-85ae-9d799d9b886a",
      "parentUUID": "59f5ae1e-7881-4c51-9fa4-43907ffaa6d1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path",
      "fullTitle": "#setFee happy path",
      "timedOut": false,
      "duration": 67,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      const defaultFee = await tokenReg.fee();\n      assert.equal(defaultFee.toString(10), web3.toWei(0.05, 'ether').toString(10));\n      await tokenReg.setFee(1);\n      const newFee = await tokenReg.fee();\n      assert.equal(newFee.toNumber(), 1);",
      "err": {},
      "isRoot": false,
      "uuid": "47848539-275a-4f2b-95e9-2573674901c3",
      "parentUUID": "240f8cdf-ddf3-40e2-abb8-c54b59054f4c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when is not called by afri(owner)",
      "fullTitle": "#setFee throws when is not called by afri(owner)",
      "timedOut": false,
      "duration": 68,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      const defaultFee = await tokenReg.fee();\n      assert.equal(defaultFee.toString(10), web3.toWei(0.05, 'ether').toString(10));\n      await expectThrow(tokenReg.setFee(1, {from: investor}));\n      const newFee = await tokenReg.fee();\n      assert.equal(newFee.toString(10), defaultFee.toString(10));",
      "err": {},
      "isRoot": false,
      "uuid": "008d4222-86ea-40f1-ad47-d31f54915c61",
      "parentUUID": "240f8cdf-ddf3-40e2-abb8-c54b59054f4c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path",
      "fullTitle": "#setMeta happy path",
      "timedOut": false,
      "duration": 57,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      await tokenReg.setMeta(id, \"hello\", \"world\");\n      let url = await tokenReg.meta(id, \"hello\");\n      var buf = new Buffer(url.replace('0x',''),'hex');\n      url = buf.toString().replace(/\\u0000/g, '');\n      assert.equal(url, \"world\");",
      "err": {},
      "isRoot": false,
      "uuid": "1137d37d-ec56-4712-aa6d-efeeb6d20171",
      "parentUUID": "0f3fec05-5c9f-4ecb-87b6-180b5ee11128",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path",
      "fullTitle": "#updateToken happy path",
      "timedOut": false,
      "duration": 140,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      const oldAddress = token.address;\n      assert.equal(tla.toString(10), 'SIM');\n      assert.equal(base.toNumber(), 10**18);\n      assert.equal(name.toString(10), \"SimpleToken\");\n      assert.equal(owner.toString(10), owner);\n      token = await AnotherToken.new();\n      await tokenReg.updateToken(id,token.address);\n      let [newAddress, newTla, newBase, newName, newOwner] = await tokenReg.token(id);\n      assert(oldAddress !== newAddress);\n      assert.equal(tla.toString(10), newTla.toString(10));\n      assert.equal(newBase.toNumber(), 10**10);\n      assert.equal(owner.toString(10), newOwner.toString(10));",
      "err": {},
      "isRoot": false,
      "uuid": "7909e5c1-3550-48fb-a78a-84b77df8a916",
      "parentUUID": "6365c97c-c1c0-4e11-b821-7a683b3d6de9",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path",
      "fullTitle": "#drain happy path",
      "timedOut": false,
      "duration": 644,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      let pre = await web3.eth.getBalance(owner);\n      await tokenReg.drain();\n      let post = await web3.fromWei(web3.eth.getBalance(owner), 'ether').round(1);\n      let prePlusDrain = web3.fromWei(pre.add(web3.toWei(1, 'ether')), 'ether').round(1);\n      assert.equal(post.toString(10), prePlusDrain.toString(10));",
      "err": {},
      "isRoot": false,
      "uuid": "d332ecf6-0ab9-4b3a-92fe-959a1025db24",
      "parentUUID": "f51ddd7a-d508-4bd5-ad27-68abe39202f4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if not called by afri(owner) path",
      "fullTitle": "#drain throws if not called by afri(owner) path",
      "timedOut": false,
      "duration": 615,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      let pre = await web3.eth.getBalance(owner);\n      await expectThrow(tokenReg.drain({from: investor}));\n      let post = await web3.fromWei(web3.eth.getBalance(owner), 'ether');\n      assert.equal(post.toString(10), post.toString(10));",
      "err": {},
      "isRoot": false,
      "uuid": "9a1b6021-a25a-4247-9715-9f718e468423",
      "parentUUID": "f51ddd7a-d508-4bd5-ad27-68abe39202f4",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "happy path",
      "fullTitle": "#register happy path",
      "timedOut": false,
      "duration": 206,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await tokenReg.register(token.address, \"SIM\", \"SimpleToken\", {from: owner, value: fee});\n      count = await tokenReg.tokenCount();\n      assert.equal(1, count.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "e7a50929-c14c-44d1-a892-fc289747c543",
      "parentUUID": "0350a0e7-89dc-4c16-a28a-03d3c64f392c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if TLA is empty",
      "fullTitle": "#register should throw if TLA is empty",
      "timedOut": false,
      "duration": 112,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await expectThrow(tokenReg.register(token.address, \"\", \"SimpleToken\", {from: owner, value: fee}));\n      count = await tokenReg.tokenCount();\n      assert.equal(0, count.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "da4fd837-bb8b-4700-8729-313062c92da5",
      "parentUUID": "0350a0e7-89dc-4c16-a28a-03d3c64f392c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if Name is empty",
      "fullTitle": "#register should throw if Name is empty",
      "timedOut": false,
      "duration": 103,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"\", {from: owner, value: fee}));\n      count = await tokenReg.tokenCount();\n      assert.equal(0, count.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "31c17c98-be3c-49f4-9db6-2c64abe1fc12",
      "parentUUID": "0350a0e7-89dc-4c16-a28a-03d3c64f392c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if fee is less than required",
      "fullTitle": "#register should throw if fee is less than required",
      "timedOut": false,
      "duration": 97,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"\", {from: owner, value: fee.sub(1)}));\n      count = await tokenReg.tokenCount();\n      assert.equal(0, count.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "8e1ffd2c-0d23-47c3-ac5a-43f5086a286d",
      "parentUUID": "0350a0e7-89dc-4c16-a28a-03d3c64f392c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if address is taken",
      "fullTitle": "#register should throw if address is taken",
      "timedOut": false,
      "duration": 191,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await tokenReg.register(token.address, \"SIM\", \"Simple\", {from: owner, value: web3.toWei(0.05, 'ether')});\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"\", {from: owner, value: web3.toWei(0.05, 'ether')}));\n      count = await tokenReg.tokenCount();\n      assert.equal(1, count.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "aae58a28-92f7-47ff-9d99-da7159be5506",
      "parentUUID": "0350a0e7-89dc-4c16-a28a-03d3c64f392c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if tla is taken",
      "fullTitle": "#register should throw if tla is taken",
      "timedOut": false,
      "duration": 199,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await tokenReg.register(token.address, \"SIM\", \"Simple\", {from: owner, value: web3.toWei(0.05, 'ether')});\n      token = await Token.new();\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"AnotherSIM\", {from: owner, value: web3.toWei(0.05, 'ether')}));\n      count = await tokenReg.tokenCount();\n      assert.equal(1, count.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "af853cad-6de9-4541-adf5-bc4783e1f58d",
      "parentUUID": "0350a0e7-89dc-4c16-a28a-03d3c64f392c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path",
      "fullTitle": "#unregister happy path",
      "timedOut": false,
      "duration": 172,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 1);\n      [id] = await tokenReg.fromAddress(token.address);\n      await tokenReg.unregister(id);\n      count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);",
      "err": {},
      "isRoot": false,
      "uuid": "7296f5ed-7909-4443-a7b9-6d075cb2b62f",
      "parentUUID": "59f5ae1e-7881-4c51-9fa4-43907ffaa6d1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when is not called from afri(owner)",
      "fullTitle": "#unregister throws when is not called from afri(owner)",
      "timedOut": false,
      "duration": 167,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 1);\n      [id] = await tokenReg.fromAddress(token.address);\n      await expectThrow(tokenReg.unregister(id, {from: investor}));\n      count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 1);",
      "err": {},
      "isRoot": false,
      "uuid": "b3546396-7d93-4850-85ae-9d799d9b886a",
      "parentUUID": "59f5ae1e-7881-4c51-9fa4-43907ffaa6d1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path",
      "fullTitle": "#setFee happy path",
      "timedOut": false,
      "duration": 67,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      const defaultFee = await tokenReg.fee();\n      assert.equal(defaultFee.toString(10), web3.toWei(0.05, 'ether').toString(10));\n      await tokenReg.setFee(1);\n      const newFee = await tokenReg.fee();\n      assert.equal(newFee.toNumber(), 1);",
      "err": {},
      "isRoot": false,
      "uuid": "47848539-275a-4f2b-95e9-2573674901c3",
      "parentUUID": "240f8cdf-ddf3-40e2-abb8-c54b59054f4c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when is not called by afri(owner)",
      "fullTitle": "#setFee throws when is not called by afri(owner)",
      "timedOut": false,
      "duration": 68,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      const defaultFee = await tokenReg.fee();\n      assert.equal(defaultFee.toString(10), web3.toWei(0.05, 'ether').toString(10));\n      await expectThrow(tokenReg.setFee(1, {from: investor}));\n      const newFee = await tokenReg.fee();\n      assert.equal(newFee.toString(10), defaultFee.toString(10));",
      "err": {},
      "isRoot": false,
      "uuid": "008d4222-86ea-40f1-ad47-d31f54915c61",
      "parentUUID": "240f8cdf-ddf3-40e2-abb8-c54b59054f4c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path",
      "fullTitle": "#setMeta happy path",
      "timedOut": false,
      "duration": 57,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      await tokenReg.setMeta(id, \"hello\", \"world\");\n      let url = await tokenReg.meta(id, \"hello\");\n      var buf = new Buffer(url.replace('0x',''),'hex');\n      url = buf.toString().replace(/\\u0000/g, '');\n      assert.equal(url, \"world\");",
      "err": {},
      "isRoot": false,
      "uuid": "1137d37d-ec56-4712-aa6d-efeeb6d20171",
      "parentUUID": "0f3fec05-5c9f-4ecb-87b6-180b5ee11128",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path",
      "fullTitle": "#updateToken happy path",
      "timedOut": false,
      "duration": 140,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      const oldAddress = token.address;\n      assert.equal(tla.toString(10), 'SIM');\n      assert.equal(base.toNumber(), 10**18);\n      assert.equal(name.toString(10), \"SimpleToken\");\n      assert.equal(owner.toString(10), owner);\n      token = await AnotherToken.new();\n      await tokenReg.updateToken(id,token.address);\n      let [newAddress, newTla, newBase, newName, newOwner] = await tokenReg.token(id);\n      assert(oldAddress !== newAddress);\n      assert.equal(tla.toString(10), newTla.toString(10));\n      assert.equal(newBase.toNumber(), 10**10);\n      assert.equal(owner.toString(10), newOwner.toString(10));",
      "err": {},
      "isRoot": false,
      "uuid": "7909e5c1-3550-48fb-a78a-84b77df8a916",
      "parentUUID": "6365c97c-c1c0-4e11-b821-7a683b3d6de9",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path",
      "fullTitle": "#drain happy path",
      "timedOut": false,
      "duration": 644,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      let pre = await web3.eth.getBalance(owner);\n      await tokenReg.drain();\n      let post = await web3.fromWei(web3.eth.getBalance(owner), 'ether').round(1);\n      let prePlusDrain = web3.fromWei(pre.add(web3.toWei(1, 'ether')), 'ether').round(1);\n      assert.equal(post.toString(10), prePlusDrain.toString(10));",
      "err": {},
      "isRoot": false,
      "uuid": "d332ecf6-0ab9-4b3a-92fe-959a1025db24",
      "parentUUID": "f51ddd7a-d508-4bd5-ad27-68abe39202f4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if not called by afri(owner) path",
      "fullTitle": "#drain throws if not called by afri(owner) path",
      "timedOut": false,
      "duration": 615,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      let pre = await web3.eth.getBalance(owner);\n      await expectThrow(tokenReg.drain({from: investor}));\n      let post = await web3.fromWei(web3.eth.getBalance(owner), 'ether');\n      assert.equal(post.toString(10), post.toString(10));",
      "err": {},
      "isRoot": false,
      "uuid": "9a1b6021-a25a-4247-9715-9f718e468423",
      "parentUUID": "f51ddd7a-d508-4bd5-ad27-68abe39202f4",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}