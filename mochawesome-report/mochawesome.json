{
  "stats": {
    "suites": 7,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2017-10-07T21:19:39.891Z",
    "end": "2017-10-07T21:19:44.653Z",
    "duration": 4762,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Token",
        "suites": [],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "uuid": "4075b6c1-b066-42fa-9cef-7d6e71a4e080",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Token \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "a11d1d3f-7f25-4a61-a760-e26ae30570ed",
            "parentUUID": "4075b6c1-b066-42fa-9cef-7d6e71a4e080",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Token \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "9edbb3df-3615-4274-81f3-862ce3dd1749",
            "parentUUID": "4075b6c1-b066-42fa-9cef-7d6e71a4e080",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Token \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "1b8804bd-9ca4-4aca-90e0-b14fd41b5e2a",
            "parentUUID": "4075b6c1-b066-42fa-9cef-7d6e71a4e080",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "",
        "file": "",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": false,
        "hasSuites": false,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Contract: TokenReg",
        "suites": [
          {
            "title": "#register",
            "suites": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: TokenReg #register happy path",
                "timedOut": false,
                "duration": 212,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await tokenReg.register(token.address, \"SIM\", \"SimpleToken\", {from: owner, value: fee, gas: 200000});\n      count = await tokenReg.tokenCount();\n      assert.equal(1, count.toNumber());",
                "err": {},
                "isRoot": false,
                "uuid": "f2fa35e5-f37f-4b3f-99df-031f812a6a1d",
                "parentUUID": "fffc2440-b4c1-4c35-a3b9-89c3b1256997",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if TLA is empty",
                "fullTitle": "Contract: TokenReg #register should throw if TLA is empty",
                "timedOut": false,
                "duration": 123,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await expectThrow(tokenReg.register(token.address, \"\", \"SimpleToken\", {from: owner, value: fee, gas: 200000}));\n      count = await tokenReg.tokenCount();\n      assert.equal(0, count.toNumber());",
                "err": {},
                "isRoot": false,
                "uuid": "2e306a4e-7956-483b-96fa-c6ea3eea2043",
                "parentUUID": "fffc2440-b4c1-4c35-a3b9-89c3b1256997",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if Name is empty",
                "fullTitle": "Contract: TokenReg #register should throw if Name is empty",
                "timedOut": false,
                "duration": 100,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"\", {from: owner, value: fee, gas: 200000}));\n      count = await tokenReg.tokenCount();\n      assert.equal(0, count.toNumber());",
                "err": {},
                "isRoot": false,
                "uuid": "8ffe8a94-954b-47a2-83ed-765268f551f0",
                "parentUUID": "fffc2440-b4c1-4c35-a3b9-89c3b1256997",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if fee is less than required",
                "fullTitle": "Contract: TokenReg #register should throw if fee is less than required",
                "timedOut": false,
                "duration": 96,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"\", {from: owner, value: fee.sub(1), gas: 200000}));\n      count = await tokenReg.tokenCount();\n      assert.equal(0, count.toNumber());",
                "err": {},
                "isRoot": false,
                "uuid": "2d7b72ca-fd2a-4906-b3c1-9d6df034824e",
                "parentUUID": "fffc2440-b4c1-4c35-a3b9-89c3b1256997",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if address is taken",
                "fullTitle": "Contract: TokenReg #register should throw if address is taken",
                "timedOut": false,
                "duration": 165,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await tokenReg.register(token.address, \"SIM\", \"Simple\", {from: owner, value: web3.toWei(0.05, 'ether'), gas: 200000});\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"\", {from: owner, value: web3.toWei(0.05, 'ether'), gas: 200000}));\n      count = await tokenReg.tokenCount();\n      assert.equal(1, count.toNumber());",
                "err": {},
                "isRoot": false,
                "uuid": "fe61cabb-9b16-4bc1-88c8-69afea9ada4c",
                "parentUUID": "fffc2440-b4c1-4c35-a3b9-89c3b1256997",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if tla is taken",
                "fullTitle": "Contract: TokenReg #register should throw if tla is taken",
                "timedOut": false,
                "duration": 184,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await tokenReg.register(token.address, \"SIM\", \"Simple\", {from: owner, value: web3.toWei(0.05, 'ether'), gas: 200000});\n      token = await Token.new();\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"AnotherSIM\", {from: owner, value: web3.toWei(0.05, 'ether'), gas: 200000}));\n      count = await tokenReg.tokenCount();\n      assert.equal(1, count.toNumber());",
                "err": {},
                "isRoot": false,
                "uuid": "366d10cd-8c09-47b4-b901-476261642c02",
                "parentUUID": "fffc2440-b4c1-4c35-a3b9-89c3b1256997",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 300000,
            "file": "/test/tokenreg_test.js",
            "uuid": "fffc2440-b4c1-4c35-a3b9-89c3b1256997",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: TokenReg #register \"before each\" hook",
                "timedOut": false,
                "duration": 74,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "async function (){\n        tokenReg = await TokenReg.new();\n        token = await Token.new();",
                "err": {},
                "isRoot": false,
                "uuid": "a16f2299-0d05-4a5a-81fe-9e60bbbd8605",
                "parentUUID": "fffc2440-b4c1-4c35-a3b9-89c3b1256997",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "fullFile": "/Users/rstorm/repos/tokenreg/test/tokenreg_test.js",
            "passes": [
              {
                "title": "happy path",
                "fullTitle": "Contract: TokenReg #register happy path",
                "timedOut": false,
                "duration": 212,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await tokenReg.register(token.address, \"SIM\", \"SimpleToken\", {from: owner, value: fee, gas: 200000});\n      count = await tokenReg.tokenCount();\n      assert.equal(1, count.toNumber());",
                "err": {},
                "isRoot": false,
                "uuid": "f2fa35e5-f37f-4b3f-99df-031f812a6a1d",
                "parentUUID": "fffc2440-b4c1-4c35-a3b9-89c3b1256997",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if TLA is empty",
                "fullTitle": "Contract: TokenReg #register should throw if TLA is empty",
                "timedOut": false,
                "duration": 123,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await expectThrow(tokenReg.register(token.address, \"\", \"SimpleToken\", {from: owner, value: fee, gas: 200000}));\n      count = await tokenReg.tokenCount();\n      assert.equal(0, count.toNumber());",
                "err": {},
                "isRoot": false,
                "uuid": "2e306a4e-7956-483b-96fa-c6ea3eea2043",
                "parentUUID": "fffc2440-b4c1-4c35-a3b9-89c3b1256997",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if Name is empty",
                "fullTitle": "Contract: TokenReg #register should throw if Name is empty",
                "timedOut": false,
                "duration": 100,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"\", {from: owner, value: fee, gas: 200000}));\n      count = await tokenReg.tokenCount();\n      assert.equal(0, count.toNumber());",
                "err": {},
                "isRoot": false,
                "uuid": "8ffe8a94-954b-47a2-83ed-765268f551f0",
                "parentUUID": "fffc2440-b4c1-4c35-a3b9-89c3b1256997",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if fee is less than required",
                "fullTitle": "Contract: TokenReg #register should throw if fee is less than required",
                "timedOut": false,
                "duration": 96,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"\", {from: owner, value: fee.sub(1), gas: 200000}));\n      count = await tokenReg.tokenCount();\n      assert.equal(0, count.toNumber());",
                "err": {},
                "isRoot": false,
                "uuid": "2d7b72ca-fd2a-4906-b3c1-9d6df034824e",
                "parentUUID": "fffc2440-b4c1-4c35-a3b9-89c3b1256997",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if address is taken",
                "fullTitle": "Contract: TokenReg #register should throw if address is taken",
                "timedOut": false,
                "duration": 165,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await tokenReg.register(token.address, \"SIM\", \"Simple\", {from: owner, value: web3.toWei(0.05, 'ether'), gas: 200000});\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"\", {from: owner, value: web3.toWei(0.05, 'ether'), gas: 200000}));\n      count = await tokenReg.tokenCount();\n      assert.equal(1, count.toNumber());",
                "err": {},
                "isRoot": false,
                "uuid": "fe61cabb-9b16-4bc1-88c8-69afea9ada4c",
                "parentUUID": "fffc2440-b4c1-4c35-a3b9-89c3b1256997",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if tla is taken",
                "fullTitle": "Contract: TokenReg #register should throw if tla is taken",
                "timedOut": false,
                "duration": 184,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await tokenReg.register(token.address, \"SIM\", \"Simple\", {from: owner, value: web3.toWei(0.05, 'ether'), gas: 200000});\n      token = await Token.new();\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"AnotherSIM\", {from: owner, value: web3.toWei(0.05, 'ether'), gas: 200000}));\n      count = await tokenReg.tokenCount();\n      assert.equal(1, count.toNumber());",
                "err": {},
                "isRoot": false,
                "uuid": "366d10cd-8c09-47b4-b901-476261642c02",
                "parentUUID": "fffc2440-b4c1-4c35-a3b9-89c3b1256997",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 880,
            "rootEmpty": false
          },
          {
            "title": "#unregister",
            "suites": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: TokenReg #unregister happy path",
                "timedOut": false,
                "duration": 183,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 1);\n      [id] = await tokenReg.fromAddress(token.address);\n      await tokenReg.unregister(id);\n      count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);",
                "err": {},
                "isRoot": false,
                "uuid": "6f582f69-54c0-4c1f-8947-d38faf820f67",
                "parentUUID": "3b23d543-312e-4d99-a1c0-b130744f3c59",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when is not called from afri(owner)",
                "fullTitle": "Contract: TokenReg #unregister throws when is not called from afri(owner)",
                "timedOut": false,
                "duration": 155,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 1);\n      [id] = await tokenReg.fromAddress(token.address);\n      await expectThrow(tokenReg.unregister(id, {from: investor}));\n      count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 1);",
                "err": {},
                "isRoot": false,
                "uuid": "919d9c9f-6e66-4315-95c3-774d75397b22",
                "parentUUID": "3b23d543-312e-4d99-a1c0-b130744f3c59",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 300000,
            "file": "/test/tokenreg_test.js",
            "uuid": "3b23d543-312e-4d99-a1c0-b130744f3c59",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: TokenReg #unregister \"before each\" hook",
                "timedOut": false,
                "duration": 165,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      tokenReg = await TokenReg.new();\n      token = await Token.new();\n      const fee = await tokenReg.fee();\n      await tokenReg.register(token.address, \"SIM\", \"SimpleToken\", {from: owner, value: fee, gas: 200000});",
                "err": {},
                "isRoot": false,
                "uuid": "f04462ce-6116-4f73-9a89-1f3b7a3b9704",
                "parentUUID": "3b23d543-312e-4d99-a1c0-b130744f3c59",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "fullFile": "/Users/rstorm/repos/tokenreg/test/tokenreg_test.js",
            "passes": [
              {
                "title": "happy path",
                "fullTitle": "Contract: TokenReg #unregister happy path",
                "timedOut": false,
                "duration": 183,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 1);\n      [id] = await tokenReg.fromAddress(token.address);\n      await tokenReg.unregister(id);\n      count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);",
                "err": {},
                "isRoot": false,
                "uuid": "6f582f69-54c0-4c1f-8947-d38faf820f67",
                "parentUUID": "3b23d543-312e-4d99-a1c0-b130744f3c59",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when is not called from afri(owner)",
                "fullTitle": "Contract: TokenReg #unregister throws when is not called from afri(owner)",
                "timedOut": false,
                "duration": 155,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 1);\n      [id] = await tokenReg.fromAddress(token.address);\n      await expectThrow(tokenReg.unregister(id, {from: investor}));\n      count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 1);",
                "err": {},
                "isRoot": false,
                "uuid": "919d9c9f-6e66-4315-95c3-774d75397b22",
                "parentUUID": "3b23d543-312e-4d99-a1c0-b130744f3c59",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 338,
            "rootEmpty": false
          },
          {
            "title": "#setFee",
            "suites": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: TokenReg #setFee happy path",
                "timedOut": false,
                "duration": 73,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      const defaultFee = await tokenReg.fee();\n      assert.equal(defaultFee.toString(10), web3.toWei(0.05, 'ether').toString(10));\n      await tokenReg.setFee(1);\n      const newFee = await tokenReg.fee();\n      assert.equal(newFee.toNumber(), 1);",
                "err": {},
                "isRoot": false,
                "uuid": "601e1291-9f02-4455-8c8d-a5d3043afaca",
                "parentUUID": "2dac129c-849f-475d-a1d2-294ddaf235ab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when is not called by afri(owner)",
                "fullTitle": "Contract: TokenReg #setFee throws when is not called by afri(owner)",
                "timedOut": false,
                "duration": 71,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      const defaultFee = await tokenReg.fee();\n      assert.equal(defaultFee.toString(10), web3.toWei(0.05, 'ether').toString(10));\n      await expectThrow(tokenReg.setFee(1, {from: investor}));\n      const newFee = await tokenReg.fee();\n      assert.equal(newFee.toString(10), defaultFee.toString(10));",
                "err": {},
                "isRoot": false,
                "uuid": "61c9731e-4282-4f0d-b2d7-f8e08bf28c14",
                "parentUUID": "2dac129c-849f-475d-a1d2-294ddaf235ab",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 300000,
            "file": "/test/tokenreg_test.js",
            "uuid": "2dac129c-849f-475d-a1d2-294ddaf235ab",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: TokenReg #setFee \"before each\" hook",
                "timedOut": false,
                "duration": 42,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "async function (){ \n      tokenReg = await TokenReg.new();",
                "err": {},
                "isRoot": false,
                "uuid": "173af7f2-7209-4331-b5ab-70e179a17a30",
                "parentUUID": "2dac129c-849f-475d-a1d2-294ddaf235ab",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "fullFile": "/Users/rstorm/repos/tokenreg/test/tokenreg_test.js",
            "passes": [
              {
                "title": "happy path",
                "fullTitle": "Contract: TokenReg #setFee happy path",
                "timedOut": false,
                "duration": 73,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      const defaultFee = await tokenReg.fee();\n      assert.equal(defaultFee.toString(10), web3.toWei(0.05, 'ether').toString(10));\n      await tokenReg.setFee(1);\n      const newFee = await tokenReg.fee();\n      assert.equal(newFee.toNumber(), 1);",
                "err": {},
                "isRoot": false,
                "uuid": "601e1291-9f02-4455-8c8d-a5d3043afaca",
                "parentUUID": "2dac129c-849f-475d-a1d2-294ddaf235ab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when is not called by afri(owner)",
                "fullTitle": "Contract: TokenReg #setFee throws when is not called by afri(owner)",
                "timedOut": false,
                "duration": 71,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      const defaultFee = await tokenReg.fee();\n      assert.equal(defaultFee.toString(10), web3.toWei(0.05, 'ether').toString(10));\n      await expectThrow(tokenReg.setFee(1, {from: investor}));\n      const newFee = await tokenReg.fee();\n      assert.equal(newFee.toString(10), defaultFee.toString(10));",
                "err": {},
                "isRoot": false,
                "uuid": "61c9731e-4282-4f0d-b2d7-f8e08bf28c14",
                "parentUUID": "2dac129c-849f-475d-a1d2-294ddaf235ab",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 144,
            "rootEmpty": false
          },
          {
            "title": "#setMeta",
            "suites": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: TokenReg #setMeta happy path",
                "timedOut": false,
                "duration": 56,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      await tokenReg.setMeta(id, \"hello\", \"world\");\n      let url = await tokenReg.meta(id, \"hello\");\n      var buf = new Buffer(url.replace('0x',''),'hex');\n      url = buf.toString().replace(/\\u0000/g, '');\n      assert.equal(url, \"world\");",
                "err": {},
                "isRoot": false,
                "uuid": "97e70d1c-0dd3-4421-a9da-f896e5aa4b4a",
                "parentUUID": "819d61b1-8f27-4d5c-861f-9c2fcb67b8ad",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 300000,
            "file": "/test/tokenreg_test.js",
            "uuid": "819d61b1-8f27-4d5c-861f-9c2fcb67b8ad",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: TokenReg #setMeta \"before each\" hook",
                "timedOut": false,
                "duration": 228,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      tokenReg = await TokenReg.new();\n      token = await Token.new();\n      const fee = await tokenReg.fee();\n      await tokenReg.register(token.address, \"SIM\", \"SimpleToken\", {from: owner, value: fee, gas: 200000});\n      [id] = await tokenReg.fromAddress(token.address);",
                "err": {},
                "isRoot": false,
                "uuid": "c4fe89c6-816b-4ee2-af51-0513de4a85fd",
                "parentUUID": "819d61b1-8f27-4d5c-861f-9c2fcb67b8ad",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "fullFile": "/Users/rstorm/repos/tokenreg/test/tokenreg_test.js",
            "passes": [
              {
                "title": "happy path",
                "fullTitle": "Contract: TokenReg #setMeta happy path",
                "timedOut": false,
                "duration": 56,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      await tokenReg.setMeta(id, \"hello\", \"world\");\n      let url = await tokenReg.meta(id, \"hello\");\n      var buf = new Buffer(url.replace('0x',''),'hex');\n      url = buf.toString().replace(/\\u0000/g, '');\n      assert.equal(url, \"world\");",
                "err": {},
                "isRoot": false,
                "uuid": "97e70d1c-0dd3-4421-a9da-f896e5aa4b4a",
                "parentUUID": "819d61b1-8f27-4d5c-861f-9c2fcb67b8ad",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 56,
            "rootEmpty": false
          },
          {
            "title": "#updateToken",
            "suites": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: TokenReg #updateToken happy path",
                "timedOut": false,
                "duration": 146,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      const oldAddress = token.address;\n      assert.equal(tla.toString(10), 'SIM');\n      assert.equal(base.toNumber(), 10**18);\n      assert.equal(name.toString(10), \"SimpleToken\");\n      assert.equal(owner.toString(10), owner);\n      token = await AnotherToken.new();\n      await tokenReg.updateToken(id,token.address);\n      let [newAddress, newTla, newBase, newName, newOwner] = await tokenReg.token(id);\n      assert(oldAddress !== newAddress);\n      assert.equal(tla.toString(10), newTla.toString(10));\n      assert.equal(newBase.toNumber(), 10**10);\n      assert.equal(owner.toString(10), newOwner.toString(10));",
                "err": {},
                "isRoot": false,
                "uuid": "bd71cab9-d96c-4cad-a4d4-7bcb197dd946",
                "parentUUID": "6376e1ec-15da-497f-ad79-6ab13b07a888",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 300000,
            "file": "/test/tokenreg_test.js",
            "uuid": "6376e1ec-15da-497f-ad79-6ab13b07a888",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: TokenReg #updateToken \"before each\" hook",
                "timedOut": false,
                "duration": 234,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      tokenReg = await TokenReg.new();\n      token = await Token.new();\n      const fee = await tokenReg.fee();\n      await tokenReg.register(token.address, \"SIM\", \"SimpleToken\", {from: owner, value: fee, gas: 200000});\n      [id, tla, base, name, owner] = await tokenReg.fromAddress(token.address);",
                "err": {},
                "isRoot": false,
                "uuid": "d7677db4-96c0-4372-aeec-9cb7f2999b3f",
                "parentUUID": "6376e1ec-15da-497f-ad79-6ab13b07a888",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "fullFile": "/Users/rstorm/repos/tokenreg/test/tokenreg_test.js",
            "passes": [
              {
                "title": "happy path",
                "fullTitle": "Contract: TokenReg #updateToken happy path",
                "timedOut": false,
                "duration": 146,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      const oldAddress = token.address;\n      assert.equal(tla.toString(10), 'SIM');\n      assert.equal(base.toNumber(), 10**18);\n      assert.equal(name.toString(10), \"SimpleToken\");\n      assert.equal(owner.toString(10), owner);\n      token = await AnotherToken.new();\n      await tokenReg.updateToken(id,token.address);\n      let [newAddress, newTla, newBase, newName, newOwner] = await tokenReg.token(id);\n      assert(oldAddress !== newAddress);\n      assert.equal(tla.toString(10), newTla.toString(10));\n      assert.equal(newBase.toNumber(), 10**10);\n      assert.equal(owner.toString(10), newOwner.toString(10));",
                "err": {},
                "isRoot": false,
                "uuid": "bd71cab9-d96c-4cad-a4d4-7bcb197dd946",
                "parentUUID": "6376e1ec-15da-497f-ad79-6ab13b07a888",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 146,
            "rootEmpty": false
          },
          {
            "title": "#drain",
            "suites": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: TokenReg #drain happy path",
                "timedOut": false,
                "duration": 658,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      let pre = await web3.eth.getBalance(owner);\n      await tokenReg.drain();\n      let post = await web3.fromWei(web3.eth.getBalance(owner), 'ether').round(1);\n      let prePlusDrain = web3.fromWei(pre.add(web3.toWei(1, 'ether')), 'ether').round(1);\n      assert.equal(post.toString(10), prePlusDrain.toString(10));",
                "err": {},
                "isRoot": false,
                "uuid": "d5720b33-8e99-40e5-b64c-eb473e2c1b4e",
                "parentUUID": "1c087b91-9013-40f8-a874-b01a60f24e7d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws if not called by afri(owner) path",
                "fullTitle": "Contract: TokenReg #drain throws if not called by afri(owner) path",
                "timedOut": false,
                "duration": 684,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      let pre = await web3.eth.getBalance(owner);\n      await expectThrow(tokenReg.drain({from: investor}));\n      let post = await web3.fromWei(web3.eth.getBalance(owner), 'ether');\n      assert.equal(post.toString(10), post.toString(10));",
                "err": {},
                "isRoot": false,
                "uuid": "8b8f93d5-2ca9-46c7-8607-82b137a18a5d",
                "parentUUID": "1c087b91-9013-40f8-a874-b01a60f24e7d",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 300000,
            "file": "/test/tokenreg_test.js",
            "uuid": "1c087b91-9013-40f8-a874-b01a60f24e7d",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: TokenReg #drain \"before each\" hook",
                "timedOut": false,
                "duration": 119,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      tokenReg = await TokenReg.new();\n      token = await Token.new();\n      await tokenReg.register(token.address, \"SIM\", \"SimpleToken\", {from: investor, value: web3.toWei(1, 'ether'), gas: 200000});",
                "err": {},
                "isRoot": false,
                "uuid": "522610b0-fa3a-4d64-a783-9ef42c277974",
                "parentUUID": "1c087b91-9013-40f8-a874-b01a60f24e7d",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "fullFile": "/Users/rstorm/repos/tokenreg/test/tokenreg_test.js",
            "passes": [
              {
                "title": "happy path",
                "fullTitle": "Contract: TokenReg #drain happy path",
                "timedOut": false,
                "duration": 658,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      let pre = await web3.eth.getBalance(owner);\n      await tokenReg.drain();\n      let post = await web3.fromWei(web3.eth.getBalance(owner), 'ether').round(1);\n      let prePlusDrain = web3.fromWei(pre.add(web3.toWei(1, 'ether')), 'ether').round(1);\n      assert.equal(post.toString(10), prePlusDrain.toString(10));",
                "err": {},
                "isRoot": false,
                "uuid": "d5720b33-8e99-40e5-b64c-eb473e2c1b4e",
                "parentUUID": "1c087b91-9013-40f8-a874-b01a60f24e7d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws if not called by afri(owner) path",
                "fullTitle": "Contract: TokenReg #drain throws if not called by afri(owner) path",
                "timedOut": false,
                "duration": 684,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      let pre = await web3.eth.getBalance(owner);\n      await expectThrow(tokenReg.drain({from: investor}));\n      let post = await web3.fromWei(web3.eth.getBalance(owner), 'ether');\n      assert.equal(post.toString(10), post.toString(10));",
                "err": {},
                "isRoot": false,
                "uuid": "8b8f93d5-2ca9-46c7-8607-82b137a18a5d",
                "parentUUID": "1c087b91-9013-40f8-a874-b01a60f24e7d",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1342,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 300000,
        "file": "/test/tokenreg_test.js",
        "uuid": "0e2ff1e5-9f97-4782-a9a1-fe00db708aa2",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: TokenReg \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 10,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "bd7fe61d-8452-4030-84b8-2c87181404e8",
            "parentUUID": "0e2ff1e5-9f97-4782-a9a1-fe00db708aa2",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: TokenReg \"before each\" hook: before test",
            "timedOut": false,
            "duration": 4,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "01f061f5-81cd-4497-95bc-bf6cb92210af",
            "parentUUID": "0e2ff1e5-9f97-4782-a9a1-fe00db708aa2",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: TokenReg \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "97ee4cb7-39a8-4c76-99c7-dd76569d871a",
            "parentUUID": "0e2ff1e5-9f97-4782-a9a1-fe00db708aa2",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "/Users/rstorm/repos/tokenreg/test/tokenreg_test.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "648100b3-b7ec-4abf-8f1e-9944d9430371",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "happy path",
      "fullTitle": "#register happy path",
      "timedOut": false,
      "duration": 212,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await tokenReg.register(token.address, \"SIM\", \"SimpleToken\", {from: owner, value: fee, gas: 200000});\n      count = await tokenReg.tokenCount();\n      assert.equal(1, count.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "f2fa35e5-f37f-4b3f-99df-031f812a6a1d",
      "parentUUID": "fffc2440-b4c1-4c35-a3b9-89c3b1256997",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if TLA is empty",
      "fullTitle": "#register should throw if TLA is empty",
      "timedOut": false,
      "duration": 123,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await expectThrow(tokenReg.register(token.address, \"\", \"SimpleToken\", {from: owner, value: fee, gas: 200000}));\n      count = await tokenReg.tokenCount();\n      assert.equal(0, count.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "2e306a4e-7956-483b-96fa-c6ea3eea2043",
      "parentUUID": "fffc2440-b4c1-4c35-a3b9-89c3b1256997",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if Name is empty",
      "fullTitle": "#register should throw if Name is empty",
      "timedOut": false,
      "duration": 100,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"\", {from: owner, value: fee, gas: 200000}));\n      count = await tokenReg.tokenCount();\n      assert.equal(0, count.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "8ffe8a94-954b-47a2-83ed-765268f551f0",
      "parentUUID": "fffc2440-b4c1-4c35-a3b9-89c3b1256997",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if fee is less than required",
      "fullTitle": "#register should throw if fee is less than required",
      "timedOut": false,
      "duration": 96,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"\", {from: owner, value: fee.sub(1), gas: 200000}));\n      count = await tokenReg.tokenCount();\n      assert.equal(0, count.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "2d7b72ca-fd2a-4906-b3c1-9d6df034824e",
      "parentUUID": "fffc2440-b4c1-4c35-a3b9-89c3b1256997",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if address is taken",
      "fullTitle": "#register should throw if address is taken",
      "timedOut": false,
      "duration": 165,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await tokenReg.register(token.address, \"SIM\", \"Simple\", {from: owner, value: web3.toWei(0.05, 'ether'), gas: 200000});\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"\", {from: owner, value: web3.toWei(0.05, 'ether'), gas: 200000}));\n      count = await tokenReg.tokenCount();\n      assert.equal(1, count.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "fe61cabb-9b16-4bc1-88c8-69afea9ada4c",
      "parentUUID": "fffc2440-b4c1-4c35-a3b9-89c3b1256997",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if tla is taken",
      "fullTitle": "#register should throw if tla is taken",
      "timedOut": false,
      "duration": 184,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await tokenReg.register(token.address, \"SIM\", \"Simple\", {from: owner, value: web3.toWei(0.05, 'ether'), gas: 200000});\n      token = await Token.new();\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"AnotherSIM\", {from: owner, value: web3.toWei(0.05, 'ether'), gas: 200000}));\n      count = await tokenReg.tokenCount();\n      assert.equal(1, count.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "366d10cd-8c09-47b4-b901-476261642c02",
      "parentUUID": "fffc2440-b4c1-4c35-a3b9-89c3b1256997",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path",
      "fullTitle": "#unregister happy path",
      "timedOut": false,
      "duration": 183,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 1);\n      [id] = await tokenReg.fromAddress(token.address);\n      await tokenReg.unregister(id);\n      count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);",
      "err": {},
      "isRoot": false,
      "uuid": "6f582f69-54c0-4c1f-8947-d38faf820f67",
      "parentUUID": "3b23d543-312e-4d99-a1c0-b130744f3c59",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when is not called from afri(owner)",
      "fullTitle": "#unregister throws when is not called from afri(owner)",
      "timedOut": false,
      "duration": 155,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 1);\n      [id] = await tokenReg.fromAddress(token.address);\n      await expectThrow(tokenReg.unregister(id, {from: investor}));\n      count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 1);",
      "err": {},
      "isRoot": false,
      "uuid": "919d9c9f-6e66-4315-95c3-774d75397b22",
      "parentUUID": "3b23d543-312e-4d99-a1c0-b130744f3c59",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path",
      "fullTitle": "#setFee happy path",
      "timedOut": false,
      "duration": 73,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      const defaultFee = await tokenReg.fee();\n      assert.equal(defaultFee.toString(10), web3.toWei(0.05, 'ether').toString(10));\n      await tokenReg.setFee(1);\n      const newFee = await tokenReg.fee();\n      assert.equal(newFee.toNumber(), 1);",
      "err": {},
      "isRoot": false,
      "uuid": "601e1291-9f02-4455-8c8d-a5d3043afaca",
      "parentUUID": "2dac129c-849f-475d-a1d2-294ddaf235ab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when is not called by afri(owner)",
      "fullTitle": "#setFee throws when is not called by afri(owner)",
      "timedOut": false,
      "duration": 71,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      const defaultFee = await tokenReg.fee();\n      assert.equal(defaultFee.toString(10), web3.toWei(0.05, 'ether').toString(10));\n      await expectThrow(tokenReg.setFee(1, {from: investor}));\n      const newFee = await tokenReg.fee();\n      assert.equal(newFee.toString(10), defaultFee.toString(10));",
      "err": {},
      "isRoot": false,
      "uuid": "61c9731e-4282-4f0d-b2d7-f8e08bf28c14",
      "parentUUID": "2dac129c-849f-475d-a1d2-294ddaf235ab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path",
      "fullTitle": "#setMeta happy path",
      "timedOut": false,
      "duration": 56,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      await tokenReg.setMeta(id, \"hello\", \"world\");\n      let url = await tokenReg.meta(id, \"hello\");\n      var buf = new Buffer(url.replace('0x',''),'hex');\n      url = buf.toString().replace(/\\u0000/g, '');\n      assert.equal(url, \"world\");",
      "err": {},
      "isRoot": false,
      "uuid": "97e70d1c-0dd3-4421-a9da-f896e5aa4b4a",
      "parentUUID": "819d61b1-8f27-4d5c-861f-9c2fcb67b8ad",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path",
      "fullTitle": "#updateToken happy path",
      "timedOut": false,
      "duration": 146,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      const oldAddress = token.address;\n      assert.equal(tla.toString(10), 'SIM');\n      assert.equal(base.toNumber(), 10**18);\n      assert.equal(name.toString(10), \"SimpleToken\");\n      assert.equal(owner.toString(10), owner);\n      token = await AnotherToken.new();\n      await tokenReg.updateToken(id,token.address);\n      let [newAddress, newTla, newBase, newName, newOwner] = await tokenReg.token(id);\n      assert(oldAddress !== newAddress);\n      assert.equal(tla.toString(10), newTla.toString(10));\n      assert.equal(newBase.toNumber(), 10**10);\n      assert.equal(owner.toString(10), newOwner.toString(10));",
      "err": {},
      "isRoot": false,
      "uuid": "bd71cab9-d96c-4cad-a4d4-7bcb197dd946",
      "parentUUID": "6376e1ec-15da-497f-ad79-6ab13b07a888",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path",
      "fullTitle": "#drain happy path",
      "timedOut": false,
      "duration": 658,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      let pre = await web3.eth.getBalance(owner);\n      await tokenReg.drain();\n      let post = await web3.fromWei(web3.eth.getBalance(owner), 'ether').round(1);\n      let prePlusDrain = web3.fromWei(pre.add(web3.toWei(1, 'ether')), 'ether').round(1);\n      assert.equal(post.toString(10), prePlusDrain.toString(10));",
      "err": {},
      "isRoot": false,
      "uuid": "d5720b33-8e99-40e5-b64c-eb473e2c1b4e",
      "parentUUID": "1c087b91-9013-40f8-a874-b01a60f24e7d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if not called by afri(owner) path",
      "fullTitle": "#drain throws if not called by afri(owner) path",
      "timedOut": false,
      "duration": 684,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      let pre = await web3.eth.getBalance(owner);\n      await expectThrow(tokenReg.drain({from: investor}));\n      let post = await web3.fromWei(web3.eth.getBalance(owner), 'ether');\n      assert.equal(post.toString(10), post.toString(10));",
      "err": {},
      "isRoot": false,
      "uuid": "8b8f93d5-2ca9-46c7-8607-82b137a18a5d",
      "parentUUID": "1c087b91-9013-40f8-a874-b01a60f24e7d",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "happy path",
      "fullTitle": "#register happy path",
      "timedOut": false,
      "duration": 212,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await tokenReg.register(token.address, \"SIM\", \"SimpleToken\", {from: owner, value: fee, gas: 200000});\n      count = await tokenReg.tokenCount();\n      assert.equal(1, count.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "f2fa35e5-f37f-4b3f-99df-031f812a6a1d",
      "parentUUID": "fffc2440-b4c1-4c35-a3b9-89c3b1256997",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if TLA is empty",
      "fullTitle": "#register should throw if TLA is empty",
      "timedOut": false,
      "duration": 123,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await expectThrow(tokenReg.register(token.address, \"\", \"SimpleToken\", {from: owner, value: fee, gas: 200000}));\n      count = await tokenReg.tokenCount();\n      assert.equal(0, count.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "2e306a4e-7956-483b-96fa-c6ea3eea2043",
      "parentUUID": "fffc2440-b4c1-4c35-a3b9-89c3b1256997",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if Name is empty",
      "fullTitle": "#register should throw if Name is empty",
      "timedOut": false,
      "duration": 100,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"\", {from: owner, value: fee, gas: 200000}));\n      count = await tokenReg.tokenCount();\n      assert.equal(0, count.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "8ffe8a94-954b-47a2-83ed-765268f551f0",
      "parentUUID": "fffc2440-b4c1-4c35-a3b9-89c3b1256997",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if fee is less than required",
      "fullTitle": "#register should throw if fee is less than required",
      "timedOut": false,
      "duration": 96,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"\", {from: owner, value: fee.sub(1), gas: 200000}));\n      count = await tokenReg.tokenCount();\n      assert.equal(0, count.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "2d7b72ca-fd2a-4906-b3c1-9d6df034824e",
      "parentUUID": "fffc2440-b4c1-4c35-a3b9-89c3b1256997",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if address is taken",
      "fullTitle": "#register should throw if address is taken",
      "timedOut": false,
      "duration": 165,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await tokenReg.register(token.address, \"SIM\", \"Simple\", {from: owner, value: web3.toWei(0.05, 'ether'), gas: 200000});\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"\", {from: owner, value: web3.toWei(0.05, 'ether'), gas: 200000}));\n      count = await tokenReg.tokenCount();\n      assert.equal(1, count.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "fe61cabb-9b16-4bc1-88c8-69afea9ada4c",
      "parentUUID": "fffc2440-b4c1-4c35-a3b9-89c3b1256997",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if tla is taken",
      "fullTitle": "#register should throw if tla is taken",
      "timedOut": false,
      "duration": 184,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);\n      const fee = await tokenReg.fee();\n      await tokenReg.register(token.address, \"SIM\", \"Simple\", {from: owner, value: web3.toWei(0.05, 'ether'), gas: 200000});\n      token = await Token.new();\n      await expectThrow(tokenReg.register(token.address, \"SIM\", \"AnotherSIM\", {from: owner, value: web3.toWei(0.05, 'ether'), gas: 200000}));\n      count = await tokenReg.tokenCount();\n      assert.equal(1, count.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "366d10cd-8c09-47b4-b901-476261642c02",
      "parentUUID": "fffc2440-b4c1-4c35-a3b9-89c3b1256997",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path",
      "fullTitle": "#unregister happy path",
      "timedOut": false,
      "duration": 183,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 1);\n      [id] = await tokenReg.fromAddress(token.address);\n      await tokenReg.unregister(id);\n      count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 0);",
      "err": {},
      "isRoot": false,
      "uuid": "6f582f69-54c0-4c1f-8947-d38faf820f67",
      "parentUUID": "3b23d543-312e-4d99-a1c0-b130744f3c59",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when is not called from afri(owner)",
      "fullTitle": "#unregister throws when is not called from afri(owner)",
      "timedOut": false,
      "duration": 155,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      let count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 1);\n      [id] = await tokenReg.fromAddress(token.address);\n      await expectThrow(tokenReg.unregister(id, {from: investor}));\n      count = await tokenReg.tokenCount();\n      assert.equal(count.toNumber(), 1);",
      "err": {},
      "isRoot": false,
      "uuid": "919d9c9f-6e66-4315-95c3-774d75397b22",
      "parentUUID": "3b23d543-312e-4d99-a1c0-b130744f3c59",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path",
      "fullTitle": "#setFee happy path",
      "timedOut": false,
      "duration": 73,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      const defaultFee = await tokenReg.fee();\n      assert.equal(defaultFee.toString(10), web3.toWei(0.05, 'ether').toString(10));\n      await tokenReg.setFee(1);\n      const newFee = await tokenReg.fee();\n      assert.equal(newFee.toNumber(), 1);",
      "err": {},
      "isRoot": false,
      "uuid": "601e1291-9f02-4455-8c8d-a5d3043afaca",
      "parentUUID": "2dac129c-849f-475d-a1d2-294ddaf235ab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when is not called by afri(owner)",
      "fullTitle": "#setFee throws when is not called by afri(owner)",
      "timedOut": false,
      "duration": 71,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      const defaultFee = await tokenReg.fee();\n      assert.equal(defaultFee.toString(10), web3.toWei(0.05, 'ether').toString(10));\n      await expectThrow(tokenReg.setFee(1, {from: investor}));\n      const newFee = await tokenReg.fee();\n      assert.equal(newFee.toString(10), defaultFee.toString(10));",
      "err": {},
      "isRoot": false,
      "uuid": "61c9731e-4282-4f0d-b2d7-f8e08bf28c14",
      "parentUUID": "2dac129c-849f-475d-a1d2-294ddaf235ab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path",
      "fullTitle": "#setMeta happy path",
      "timedOut": false,
      "duration": 56,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      await tokenReg.setMeta(id, \"hello\", \"world\");\n      let url = await tokenReg.meta(id, \"hello\");\n      var buf = new Buffer(url.replace('0x',''),'hex');\n      url = buf.toString().replace(/\\u0000/g, '');\n      assert.equal(url, \"world\");",
      "err": {},
      "isRoot": false,
      "uuid": "97e70d1c-0dd3-4421-a9da-f896e5aa4b4a",
      "parentUUID": "819d61b1-8f27-4d5c-861f-9c2fcb67b8ad",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path",
      "fullTitle": "#updateToken happy path",
      "timedOut": false,
      "duration": 146,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      const oldAddress = token.address;\n      assert.equal(tla.toString(10), 'SIM');\n      assert.equal(base.toNumber(), 10**18);\n      assert.equal(name.toString(10), \"SimpleToken\");\n      assert.equal(owner.toString(10), owner);\n      token = await AnotherToken.new();\n      await tokenReg.updateToken(id,token.address);\n      let [newAddress, newTla, newBase, newName, newOwner] = await tokenReg.token(id);\n      assert(oldAddress !== newAddress);\n      assert.equal(tla.toString(10), newTla.toString(10));\n      assert.equal(newBase.toNumber(), 10**10);\n      assert.equal(owner.toString(10), newOwner.toString(10));",
      "err": {},
      "isRoot": false,
      "uuid": "bd71cab9-d96c-4cad-a4d4-7bcb197dd946",
      "parentUUID": "6376e1ec-15da-497f-ad79-6ab13b07a888",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path",
      "fullTitle": "#drain happy path",
      "timedOut": false,
      "duration": 658,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      let pre = await web3.eth.getBalance(owner);\n      await tokenReg.drain();\n      let post = await web3.fromWei(web3.eth.getBalance(owner), 'ether').round(1);\n      let prePlusDrain = web3.fromWei(pre.add(web3.toWei(1, 'ether')), 'ether').round(1);\n      assert.equal(post.toString(10), prePlusDrain.toString(10));",
      "err": {},
      "isRoot": false,
      "uuid": "d5720b33-8e99-40e5-b64c-eb473e2c1b4e",
      "parentUUID": "1c087b91-9013-40f8-a874-b01a60f24e7d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if not called by afri(owner) path",
      "fullTitle": "#drain throws if not called by afri(owner) path",
      "timedOut": false,
      "duration": 684,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      let pre = await web3.eth.getBalance(owner);\n      await expectThrow(tokenReg.drain({from: investor}));\n      let post = await web3.fromWei(web3.eth.getBalance(owner), 'ether');\n      assert.equal(post.toString(10), post.toString(10));",
      "err": {},
      "isRoot": false,
      "uuid": "8b8f93d5-2ca9-46c7-8607-82b137a18a5d",
      "parentUUID": "1c087b91-9013-40f8-a874-b01a60f24e7d",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}